//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QX.Plugin.Prod.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RptFail")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RptFail : global::System.Data.DataSet {
        
        private VRpt_FInformationDataTable tableVRpt_FInformation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RptFail() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RptFail(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["VRpt_FInformation"] != null)) {
                    base.Tables.Add(new VRpt_FInformationDataTable(ds.Tables["VRpt_FInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VRpt_FInformationDataTable VRpt_FInformation {
            get {
                return this.tableVRpt_FInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RptFail cln = ((RptFail)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["VRpt_FInformation"] != null)) {
                    base.Tables.Add(new VRpt_FInformationDataTable(ds.Tables["VRpt_FInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableVRpt_FInformation = ((VRpt_FInformationDataTable)(base.Tables["VRpt_FInformation"]));
            if ((initTable == true)) {
                if ((this.tableVRpt_FInformation != null)) {
                    this.tableVRpt_FInformation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RptFail";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RptFail.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVRpt_FInformation = new VRpt_FInformationDataTable();
            base.Tables.Add(this.tableVRpt_FInformation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVRpt_FInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RptFail ds = new RptFail();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void VRpt_FInformationRowChangeEventHandler(object sender, VRpt_FInformationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VRpt_FInformationDataTable : global::System.Data.TypedTableBase<VRpt_FInformationRow> {
            
            private global::System.Data.DataColumn columnFInfo_ID;
            
            private global::System.Data.DataColumn columnFInfo_Code;
            
            private global::System.Data.DataColumn columnFInfo_CustomerCode;
            
            private global::System.Data.DataColumn columnFInfo_HandCode;
            
            private global::System.Data.DataColumn columnFInfo_RespEntity1;
            
            private global::System.Data.DataColumn columnFInfo_RespEntity2;
            
            private global::System.Data.DataColumn columnFInfo_CmdCode;
            
            private global::System.Data.DataColumn columnFInfo_PartNo;
            
            private global::System.Data.DataColumn columnFInfo_PartName;
            
            private global::System.Data.DataColumn columnFInfo_PartSpec;
            
            private global::System.Data.DataColumn columnFInfo_Num;
            
            private global::System.Data.DataColumn columnFInfo_ProdNo;
            
            private global::System.Data.DataColumn columnFInfo_FindNode;
            
            private global::System.Data.DataColumn columnFInfo_FindNodeName;
            
            private global::System.Data.DataColumn columnFInfo_RespNode;
            
            private global::System.Data.DataColumn columnFInfo_RespEntity;
            
            private global::System.Data.DataColumn columnFInfo_TechReq;
            
            private global::System.Data.DataColumn columnFInfo_InCompetent;
            
            private global::System.Data.DataColumn columnFInfo_Owner;
            
            private global::System.Data.DataColumn columnFInfo_Date;
            
            private global::System.Data.DataColumn columnFInfo_Process;
            
            private global::System.Data.DataColumn columnFInfo_Stat;
            
            private global::System.Data.DataColumn columnFInfo_IsCancel;
            
            private global::System.Data.DataColumn columnFInfo_CancelPep;
            
            private global::System.Data.DataColumn columnFInfo_CancelDate;
            
            private global::System.Data.DataColumn columnFInfo_CancelDesp;
            
            private global::System.Data.DataColumn columnFInfo_IsClaim;
            
            private global::System.Data.DataColumn columnFInfo_ClaimDesp;
            
            private global::System.Data.DataColumn columnFInfo_ClaimPep;
            
            private global::System.Data.DataColumn columnFInfo_ClaimDate;
            
            private global::System.Data.DataColumn columnFInfo_Reason;
            
            private global::System.Data.DataColumn columnStat;
            
            private global::System.Data.DataColumn columnAuditStat;
            
            private global::System.Data.DataColumn columnAuditCurAudit;
            
            private global::System.Data.DataColumn columnFInfo_Udef1;
            
            private global::System.Data.DataColumn columnFInfo_Udef2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationDataTable() {
                this.TableName = "VRpt_FInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VRpt_FInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VRpt_FInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_IDColumn {
                get {
                    return this.columnFInfo_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_CodeColumn {
                get {
                    return this.columnFInfo_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_CustomerCodeColumn {
                get {
                    return this.columnFInfo_CustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_HandCodeColumn {
                get {
                    return this.columnFInfo_HandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_RespEntity1Column {
                get {
                    return this.columnFInfo_RespEntity1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_RespEntity2Column {
                get {
                    return this.columnFInfo_RespEntity2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_CmdCodeColumn {
                get {
                    return this.columnFInfo_CmdCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_PartNoColumn {
                get {
                    return this.columnFInfo_PartNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_PartNameColumn {
                get {
                    return this.columnFInfo_PartName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_PartSpecColumn {
                get {
                    return this.columnFInfo_PartSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_NumColumn {
                get {
                    return this.columnFInfo_Num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_ProdNoColumn {
                get {
                    return this.columnFInfo_ProdNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_FindNodeColumn {
                get {
                    return this.columnFInfo_FindNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_FindNodeNameColumn {
                get {
                    return this.columnFInfo_FindNodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_RespNodeColumn {
                get {
                    return this.columnFInfo_RespNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_RespEntityColumn {
                get {
                    return this.columnFInfo_RespEntity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_TechReqColumn {
                get {
                    return this.columnFInfo_TechReq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_InCompetentColumn {
                get {
                    return this.columnFInfo_InCompetent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_OwnerColumn {
                get {
                    return this.columnFInfo_Owner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_DateColumn {
                get {
                    return this.columnFInfo_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_ProcessColumn {
                get {
                    return this.columnFInfo_Process;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_StatColumn {
                get {
                    return this.columnFInfo_Stat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_IsCancelColumn {
                get {
                    return this.columnFInfo_IsCancel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_CancelPepColumn {
                get {
                    return this.columnFInfo_CancelPep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_CancelDateColumn {
                get {
                    return this.columnFInfo_CancelDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_CancelDespColumn {
                get {
                    return this.columnFInfo_CancelDesp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_IsClaimColumn {
                get {
                    return this.columnFInfo_IsClaim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_ClaimDespColumn {
                get {
                    return this.columnFInfo_ClaimDesp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_ClaimPepColumn {
                get {
                    return this.columnFInfo_ClaimPep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_ClaimDateColumn {
                get {
                    return this.columnFInfo_ClaimDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_ReasonColumn {
                get {
                    return this.columnFInfo_Reason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatColumn {
                get {
                    return this.columnStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditStatColumn {
                get {
                    return this.columnAuditStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditCurAuditColumn {
                get {
                    return this.columnAuditCurAudit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_Udef1Column {
                get {
                    return this.columnFInfo_Udef1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FInfo_Udef2Column {
                get {
                    return this.columnFInfo_Udef2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationRow this[int index] {
                get {
                    return ((VRpt_FInformationRow)(this.Rows[index]));
                }
            }
            
            public event VRpt_FInformationRowChangeEventHandler VRpt_FInformationRowChanging;
            
            public event VRpt_FInformationRowChangeEventHandler VRpt_FInformationRowChanged;
            
            public event VRpt_FInformationRowChangeEventHandler VRpt_FInformationRowDeleting;
            
            public event VRpt_FInformationRowChangeEventHandler VRpt_FInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVRpt_FInformationRow(VRpt_FInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationRow AddVRpt_FInformationRow(
                        string FInfo_Code, 
                        string FInfo_CustomerCode, 
                        string FInfo_HandCode, 
                        string FInfo_RespEntity1, 
                        string FInfo_RespEntity2, 
                        string FInfo_CmdCode, 
                        string FInfo_PartNo, 
                        string FInfo_PartName, 
                        string FInfo_PartSpec, 
                        int FInfo_Num, 
                        string FInfo_ProdNo, 
                        string FInfo_FindNode, 
                        string FInfo_FindNodeName, 
                        string FInfo_RespNode, 
                        string FInfo_RespEntity, 
                        string FInfo_TechReq, 
                        string FInfo_InCompetent, 
                        string FInfo_Owner, 
                        System.DateTime FInfo_Date, 
                        string FInfo_Process, 
                        string FInfo_Stat, 
                        int FInfo_IsCancel, 
                        string FInfo_CancelPep, 
                        System.DateTime FInfo_CancelDate, 
                        string FInfo_CancelDesp, 
                        int FInfo_IsClaim, 
                        string FInfo_ClaimDesp, 
                        string FInfo_ClaimPep, 
                        System.DateTime FInfo_ClaimDate, 
                        string FInfo_Reason, 
                        int Stat, 
                        string AuditStat, 
                        string AuditCurAudit, 
                        string FInfo_Udef1, 
                        string FInfo_Udef2) {
                VRpt_FInformationRow rowVRpt_FInformationRow = ((VRpt_FInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FInfo_Code,
                        FInfo_CustomerCode,
                        FInfo_HandCode,
                        FInfo_RespEntity1,
                        FInfo_RespEntity2,
                        FInfo_CmdCode,
                        FInfo_PartNo,
                        FInfo_PartName,
                        FInfo_PartSpec,
                        FInfo_Num,
                        FInfo_ProdNo,
                        FInfo_FindNode,
                        FInfo_FindNodeName,
                        FInfo_RespNode,
                        FInfo_RespEntity,
                        FInfo_TechReq,
                        FInfo_InCompetent,
                        FInfo_Owner,
                        FInfo_Date,
                        FInfo_Process,
                        FInfo_Stat,
                        FInfo_IsCancel,
                        FInfo_CancelPep,
                        FInfo_CancelDate,
                        FInfo_CancelDesp,
                        FInfo_IsClaim,
                        FInfo_ClaimDesp,
                        FInfo_ClaimPep,
                        FInfo_ClaimDate,
                        FInfo_Reason,
                        Stat,
                        AuditStat,
                        AuditCurAudit,
                        FInfo_Udef1,
                        FInfo_Udef2};
                rowVRpt_FInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVRpt_FInformationRow);
                return rowVRpt_FInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationRow FindByFInfo_ID(decimal FInfo_ID) {
                return ((VRpt_FInformationRow)(this.Rows.Find(new object[] {
                            FInfo_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VRpt_FInformationDataTable cln = ((VRpt_FInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VRpt_FInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFInfo_ID = base.Columns["FInfo_ID"];
                this.columnFInfo_Code = base.Columns["FInfo_Code"];
                this.columnFInfo_CustomerCode = base.Columns["FInfo_CustomerCode"];
                this.columnFInfo_HandCode = base.Columns["FInfo_HandCode"];
                this.columnFInfo_RespEntity1 = base.Columns["FInfo_RespEntity1"];
                this.columnFInfo_RespEntity2 = base.Columns["FInfo_RespEntity2"];
                this.columnFInfo_CmdCode = base.Columns["FInfo_CmdCode"];
                this.columnFInfo_PartNo = base.Columns["FInfo_PartNo"];
                this.columnFInfo_PartName = base.Columns["FInfo_PartName"];
                this.columnFInfo_PartSpec = base.Columns["FInfo_PartSpec"];
                this.columnFInfo_Num = base.Columns["FInfo_Num"];
                this.columnFInfo_ProdNo = base.Columns["FInfo_ProdNo"];
                this.columnFInfo_FindNode = base.Columns["FInfo_FindNode"];
                this.columnFInfo_FindNodeName = base.Columns["FInfo_FindNodeName"];
                this.columnFInfo_RespNode = base.Columns["FInfo_RespNode"];
                this.columnFInfo_RespEntity = base.Columns["FInfo_RespEntity"];
                this.columnFInfo_TechReq = base.Columns["FInfo_TechReq"];
                this.columnFInfo_InCompetent = base.Columns["FInfo_InCompetent"];
                this.columnFInfo_Owner = base.Columns["FInfo_Owner"];
                this.columnFInfo_Date = base.Columns["FInfo_Date"];
                this.columnFInfo_Process = base.Columns["FInfo_Process"];
                this.columnFInfo_Stat = base.Columns["FInfo_Stat"];
                this.columnFInfo_IsCancel = base.Columns["FInfo_IsCancel"];
                this.columnFInfo_CancelPep = base.Columns["FInfo_CancelPep"];
                this.columnFInfo_CancelDate = base.Columns["FInfo_CancelDate"];
                this.columnFInfo_CancelDesp = base.Columns["FInfo_CancelDesp"];
                this.columnFInfo_IsClaim = base.Columns["FInfo_IsClaim"];
                this.columnFInfo_ClaimDesp = base.Columns["FInfo_ClaimDesp"];
                this.columnFInfo_ClaimPep = base.Columns["FInfo_ClaimPep"];
                this.columnFInfo_ClaimDate = base.Columns["FInfo_ClaimDate"];
                this.columnFInfo_Reason = base.Columns["FInfo_Reason"];
                this.columnStat = base.Columns["Stat"];
                this.columnAuditStat = base.Columns["AuditStat"];
                this.columnAuditCurAudit = base.Columns["AuditCurAudit"];
                this.columnFInfo_Udef1 = base.Columns["FInfo_Udef1"];
                this.columnFInfo_Udef2 = base.Columns["FInfo_Udef2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFInfo_ID = new global::System.Data.DataColumn("FInfo_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_ID);
                this.columnFInfo_Code = new global::System.Data.DataColumn("FInfo_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Code);
                this.columnFInfo_CustomerCode = new global::System.Data.DataColumn("FInfo_CustomerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_CustomerCode);
                this.columnFInfo_HandCode = new global::System.Data.DataColumn("FInfo_HandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_HandCode);
                this.columnFInfo_RespEntity1 = new global::System.Data.DataColumn("FInfo_RespEntity1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_RespEntity1);
                this.columnFInfo_RespEntity2 = new global::System.Data.DataColumn("FInfo_RespEntity2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_RespEntity2);
                this.columnFInfo_CmdCode = new global::System.Data.DataColumn("FInfo_CmdCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_CmdCode);
                this.columnFInfo_PartNo = new global::System.Data.DataColumn("FInfo_PartNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_PartNo);
                this.columnFInfo_PartName = new global::System.Data.DataColumn("FInfo_PartName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_PartName);
                this.columnFInfo_PartSpec = new global::System.Data.DataColumn("FInfo_PartSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_PartSpec);
                this.columnFInfo_Num = new global::System.Data.DataColumn("FInfo_Num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Num);
                this.columnFInfo_ProdNo = new global::System.Data.DataColumn("FInfo_ProdNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_ProdNo);
                this.columnFInfo_FindNode = new global::System.Data.DataColumn("FInfo_FindNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_FindNode);
                this.columnFInfo_FindNodeName = new global::System.Data.DataColumn("FInfo_FindNodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_FindNodeName);
                this.columnFInfo_RespNode = new global::System.Data.DataColumn("FInfo_RespNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_RespNode);
                this.columnFInfo_RespEntity = new global::System.Data.DataColumn("FInfo_RespEntity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_RespEntity);
                this.columnFInfo_TechReq = new global::System.Data.DataColumn("FInfo_TechReq", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_TechReq);
                this.columnFInfo_InCompetent = new global::System.Data.DataColumn("FInfo_InCompetent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_InCompetent);
                this.columnFInfo_Owner = new global::System.Data.DataColumn("FInfo_Owner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Owner);
                this.columnFInfo_Date = new global::System.Data.DataColumn("FInfo_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Date);
                this.columnFInfo_Process = new global::System.Data.DataColumn("FInfo_Process", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Process);
                this.columnFInfo_Stat = new global::System.Data.DataColumn("FInfo_Stat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Stat);
                this.columnFInfo_IsCancel = new global::System.Data.DataColumn("FInfo_IsCancel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_IsCancel);
                this.columnFInfo_CancelPep = new global::System.Data.DataColumn("FInfo_CancelPep", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_CancelPep);
                this.columnFInfo_CancelDate = new global::System.Data.DataColumn("FInfo_CancelDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_CancelDate);
                this.columnFInfo_CancelDesp = new global::System.Data.DataColumn("FInfo_CancelDesp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_CancelDesp);
                this.columnFInfo_IsClaim = new global::System.Data.DataColumn("FInfo_IsClaim", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_IsClaim);
                this.columnFInfo_ClaimDesp = new global::System.Data.DataColumn("FInfo_ClaimDesp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_ClaimDesp);
                this.columnFInfo_ClaimPep = new global::System.Data.DataColumn("FInfo_ClaimPep", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_ClaimPep);
                this.columnFInfo_ClaimDate = new global::System.Data.DataColumn("FInfo_ClaimDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_ClaimDate);
                this.columnFInfo_Reason = new global::System.Data.DataColumn("FInfo_Reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Reason);
                this.columnStat = new global::System.Data.DataColumn("Stat", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStat);
                this.columnAuditStat = new global::System.Data.DataColumn("AuditStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditStat);
                this.columnAuditCurAudit = new global::System.Data.DataColumn("AuditCurAudit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditCurAudit);
                this.columnFInfo_Udef1 = new global::System.Data.DataColumn("FInfo_Udef1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Udef1);
                this.columnFInfo_Udef2 = new global::System.Data.DataColumn("FInfo_Udef2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFInfo_Udef2);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFInfo_ID}, true));
                this.columnFInfo_ID.AutoIncrement = true;
                this.columnFInfo_ID.AutoIncrementSeed = -1;
                this.columnFInfo_ID.AutoIncrementStep = -1;
                this.columnFInfo_ID.AllowDBNull = false;
                this.columnFInfo_ID.ReadOnly = true;
                this.columnFInfo_ID.Unique = true;
                this.columnFInfo_Code.MaxLength = 20;
                this.columnFInfo_CustomerCode.MaxLength = 20;
                this.columnFInfo_HandCode.MaxLength = 20;
                this.columnFInfo_RespEntity1.MaxLength = 50;
                this.columnFInfo_RespEntity2.MaxLength = 50;
                this.columnFInfo_CmdCode.MaxLength = 20;
                this.columnFInfo_PartNo.MaxLength = 20;
                this.columnFInfo_PartName.MaxLength = 50;
                this.columnFInfo_PartSpec.MaxLength = 200;
                this.columnFInfo_ProdNo.MaxLength = 20;
                this.columnFInfo_FindNode.MaxLength = 20;
                this.columnFInfo_FindNodeName.MaxLength = 20;
                this.columnFInfo_RespNode.MaxLength = 20;
                this.columnFInfo_RespEntity.MaxLength = 50;
                this.columnFInfo_TechReq.MaxLength = 200;
                this.columnFInfo_InCompetent.MaxLength = 200;
                this.columnFInfo_Owner.MaxLength = 20;
                this.columnFInfo_Process.MaxLength = 20;
                this.columnFInfo_Stat.MaxLength = 20;
                this.columnFInfo_CancelPep.MaxLength = 20;
                this.columnFInfo_CancelDesp.MaxLength = 500;
                this.columnFInfo_ClaimDesp.MaxLength = 200;
                this.columnFInfo_ClaimPep.MaxLength = 20;
                this.columnFInfo_Reason.MaxLength = 200;
                this.columnAuditStat.MaxLength = 20;
                this.columnAuditCurAudit.MaxLength = 20;
                this.columnFInfo_Udef1.MaxLength = 20;
                this.columnFInfo_Udef2.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationRow NewVRpt_FInformationRow() {
                return ((VRpt_FInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VRpt_FInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VRpt_FInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VRpt_FInformationRowChanged != null)) {
                    this.VRpt_FInformationRowChanged(this, new VRpt_FInformationRowChangeEvent(((VRpt_FInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VRpt_FInformationRowChanging != null)) {
                    this.VRpt_FInformationRowChanging(this, new VRpt_FInformationRowChangeEvent(((VRpt_FInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VRpt_FInformationRowDeleted != null)) {
                    this.VRpt_FInformationRowDeleted(this, new VRpt_FInformationRowChangeEvent(((VRpt_FInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VRpt_FInformationRowDeleting != null)) {
                    this.VRpt_FInformationRowDeleting(this, new VRpt_FInformationRowChangeEvent(((VRpt_FInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVRpt_FInformationRow(VRpt_FInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptFail ds = new RptFail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VRpt_FInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VRpt_FInformationRow : global::System.Data.DataRow {
            
            private VRpt_FInformationDataTable tableVRpt_FInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VRpt_FInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVRpt_FInformation = ((VRpt_FInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FInfo_ID {
                get {
                    return ((decimal)(this[this.tableVRpt_FInformation.FInfo_IDColumn]));
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Code {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_CustomerCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_CustomerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_CustomerCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_CustomerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_HandCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_HandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_HandCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_HandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_RespEntity1 {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_RespEntity1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_RespEntity1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_RespEntity1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_RespEntity2 {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_RespEntity2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_RespEntity2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_RespEntity2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_CmdCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_CmdCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_CmdCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_CmdCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_PartNo {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_PartNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_PartNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_PartNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_PartName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_PartNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_PartName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_PartNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_PartSpec {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_PartSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_PartSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_PartSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FInfo_Num {
                get {
                    try {
                        return ((int)(this[this.tableVRpt_FInformation.FInfo_NumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Num”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_NumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_ProdNo {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_ProdNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_ProdNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_ProdNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_FindNode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_FindNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_FindNode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_FindNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_FindNodeName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_FindNodeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_FindNodeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_FindNodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_RespNode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_RespNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_RespNode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_RespNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_RespEntity {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_RespEntityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_RespEntity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_RespEntityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_TechReq {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_TechReqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_TechReq”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_TechReqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_InCompetent {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_InCompetentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_InCompetent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_InCompetentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Owner {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_OwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Owner”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_OwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FInfo_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_FInformation.FInfo_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Process {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_ProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Process”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_ProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Stat {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_StatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Stat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_StatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FInfo_IsCancel {
                get {
                    try {
                        return ((int)(this[this.tableVRpt_FInformation.FInfo_IsCancelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_IsCancel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_IsCancelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_CancelPep {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_CancelPepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_CancelPep”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_CancelPepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FInfo_CancelDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_FInformation.FInfo_CancelDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_CancelDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_CancelDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_CancelDesp {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_CancelDespColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_CancelDesp”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_CancelDespColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FInfo_IsClaim {
                get {
                    try {
                        return ((int)(this[this.tableVRpt_FInformation.FInfo_IsClaimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_IsClaim”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_IsClaimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_ClaimDesp {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_ClaimDespColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_ClaimDesp”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_ClaimDespColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_ClaimPep {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_ClaimPepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_ClaimPep”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_ClaimPepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FInfo_ClaimDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_FInformation.FInfo_ClaimDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_ClaimDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_ClaimDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Reason {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_ReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Reason”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_ReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stat {
                get {
                    try {
                        return ((int)(this[this.tableVRpt_FInformation.StatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“Stat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.StatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditStat {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.AuditStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“AuditStat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.AuditStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditCurAudit {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.AuditCurAuditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“AuditCurAudit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.AuditCurAuditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Udef1 {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_Udef1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Udef1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_Udef1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FInfo_Udef2 {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FInformation.FInfo_Udef2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FInformation”中列“FInfo_Udef2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FInformation.FInfo_Udef2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_CodeNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_CodeNull() {
                this[this.tableVRpt_FInformation.FInfo_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_CustomerCodeNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_CustomerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_CustomerCodeNull() {
                this[this.tableVRpt_FInformation.FInfo_CustomerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_HandCodeNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_HandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_HandCodeNull() {
                this[this.tableVRpt_FInformation.FInfo_HandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_RespEntity1Null() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_RespEntity1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_RespEntity1Null() {
                this[this.tableVRpt_FInformation.FInfo_RespEntity1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_RespEntity2Null() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_RespEntity2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_RespEntity2Null() {
                this[this.tableVRpt_FInformation.FInfo_RespEntity2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_CmdCodeNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_CmdCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_CmdCodeNull() {
                this[this.tableVRpt_FInformation.FInfo_CmdCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_PartNoNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_PartNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_PartNoNull() {
                this[this.tableVRpt_FInformation.FInfo_PartNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_PartNameNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_PartNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_PartNameNull() {
                this[this.tableVRpt_FInformation.FInfo_PartNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_PartSpecNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_PartSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_PartSpecNull() {
                this[this.tableVRpt_FInformation.FInfo_PartSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_NumNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_NumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_NumNull() {
                this[this.tableVRpt_FInformation.FInfo_NumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_ProdNoNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_ProdNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_ProdNoNull() {
                this[this.tableVRpt_FInformation.FInfo_ProdNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_FindNodeNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_FindNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_FindNodeNull() {
                this[this.tableVRpt_FInformation.FInfo_FindNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_FindNodeNameNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_FindNodeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_FindNodeNameNull() {
                this[this.tableVRpt_FInformation.FInfo_FindNodeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_RespNodeNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_RespNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_RespNodeNull() {
                this[this.tableVRpt_FInformation.FInfo_RespNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_RespEntityNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_RespEntityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_RespEntityNull() {
                this[this.tableVRpt_FInformation.FInfo_RespEntityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_TechReqNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_TechReqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_TechReqNull() {
                this[this.tableVRpt_FInformation.FInfo_TechReqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_InCompetentNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_InCompetentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_InCompetentNull() {
                this[this.tableVRpt_FInformation.FInfo_InCompetentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_OwnerNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_OwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_OwnerNull() {
                this[this.tableVRpt_FInformation.FInfo_OwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_DateNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_DateNull() {
                this[this.tableVRpt_FInformation.FInfo_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_ProcessNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_ProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_ProcessNull() {
                this[this.tableVRpt_FInformation.FInfo_ProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_StatNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_StatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_StatNull() {
                this[this.tableVRpt_FInformation.FInfo_StatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_IsCancelNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_IsCancelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_IsCancelNull() {
                this[this.tableVRpt_FInformation.FInfo_IsCancelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_CancelPepNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_CancelPepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_CancelPepNull() {
                this[this.tableVRpt_FInformation.FInfo_CancelPepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_CancelDateNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_CancelDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_CancelDateNull() {
                this[this.tableVRpt_FInformation.FInfo_CancelDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_CancelDespNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_CancelDespColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_CancelDespNull() {
                this[this.tableVRpt_FInformation.FInfo_CancelDespColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_IsClaimNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_IsClaimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_IsClaimNull() {
                this[this.tableVRpt_FInformation.FInfo_IsClaimColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_ClaimDespNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_ClaimDespColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_ClaimDespNull() {
                this[this.tableVRpt_FInformation.FInfo_ClaimDespColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_ClaimPepNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_ClaimPepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_ClaimPepNull() {
                this[this.tableVRpt_FInformation.FInfo_ClaimPepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_ClaimDateNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_ClaimDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_ClaimDateNull() {
                this[this.tableVRpt_FInformation.FInfo_ClaimDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_ReasonNull() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_ReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_ReasonNull() {
                this[this.tableVRpt_FInformation.FInfo_ReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatNull() {
                return this.IsNull(this.tableVRpt_FInformation.StatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatNull() {
                this[this.tableVRpt_FInformation.StatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditStatNull() {
                return this.IsNull(this.tableVRpt_FInformation.AuditStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditStatNull() {
                this[this.tableVRpt_FInformation.AuditStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditCurAuditNull() {
                return this.IsNull(this.tableVRpt_FInformation.AuditCurAuditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditCurAuditNull() {
                this[this.tableVRpt_FInformation.AuditCurAuditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_Udef1Null() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_Udef1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_Udef1Null() {
                this[this.tableVRpt_FInformation.FInfo_Udef1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFInfo_Udef2Null() {
                return this.IsNull(this.tableVRpt_FInformation.FInfo_Udef2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFInfo_Udef2Null() {
                this[this.tableVRpt_FInformation.FInfo_Udef2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VRpt_FInformationRowChangeEvent : global::System.EventArgs {
            
            private VRpt_FInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationRowChangeEvent(VRpt_FInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QX.Plugin.Prod.Report.RptFailTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VRpt_FInformationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VRpt_FInformationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "VRpt_FInformation";
            tableMapping.ColumnMappings.Add("FInfo_ID", "FInfo_ID");
            tableMapping.ColumnMappings.Add("FInfo_Code", "FInfo_Code");
            tableMapping.ColumnMappings.Add("FInfo_CustomerCode", "FInfo_CustomerCode");
            tableMapping.ColumnMappings.Add("FInfo_HandCode", "FInfo_HandCode");
            tableMapping.ColumnMappings.Add("FInfo_RespEntity1", "FInfo_RespEntity1");
            tableMapping.ColumnMappings.Add("FInfo_RespEntity2", "FInfo_RespEntity2");
            tableMapping.ColumnMappings.Add("FInfo_CmdCode", "FInfo_CmdCode");
            tableMapping.ColumnMappings.Add("FInfo_PartNo", "FInfo_PartNo");
            tableMapping.ColumnMappings.Add("FInfo_PartName", "FInfo_PartName");
            tableMapping.ColumnMappings.Add("FInfo_PartSpec", "FInfo_PartSpec");
            tableMapping.ColumnMappings.Add("FInfo_Num", "FInfo_Num");
            tableMapping.ColumnMappings.Add("FInfo_ProdNo", "FInfo_ProdNo");
            tableMapping.ColumnMappings.Add("FInfo_FindNode", "FInfo_FindNode");
            tableMapping.ColumnMappings.Add("FInfo_FindNodeName", "FInfo_FindNodeName");
            tableMapping.ColumnMappings.Add("FInfo_RespNode", "FInfo_RespNode");
            tableMapping.ColumnMappings.Add("FInfo_RespEntity", "FInfo_RespEntity");
            tableMapping.ColumnMappings.Add("FInfo_TechReq", "FInfo_TechReq");
            tableMapping.ColumnMappings.Add("FInfo_InCompetent", "FInfo_InCompetent");
            tableMapping.ColumnMappings.Add("FInfo_Owner", "FInfo_Owner");
            tableMapping.ColumnMappings.Add("FInfo_Date", "FInfo_Date");
            tableMapping.ColumnMappings.Add("FInfo_Process", "FInfo_Process");
            tableMapping.ColumnMappings.Add("FInfo_Stat", "FInfo_Stat");
            tableMapping.ColumnMappings.Add("FInfo_IsCancel", "FInfo_IsCancel");
            tableMapping.ColumnMappings.Add("FInfo_CancelPep", "FInfo_CancelPep");
            tableMapping.ColumnMappings.Add("FInfo_CancelDate", "FInfo_CancelDate");
            tableMapping.ColumnMappings.Add("FInfo_CancelDesp", "FInfo_CancelDesp");
            tableMapping.ColumnMappings.Add("FInfo_IsClaim", "FInfo_IsClaim");
            tableMapping.ColumnMappings.Add("FInfo_ClaimDesp", "FInfo_ClaimDesp");
            tableMapping.ColumnMappings.Add("FInfo_ClaimPep", "FInfo_ClaimPep");
            tableMapping.ColumnMappings.Add("FInfo_ClaimDate", "FInfo_ClaimDate");
            tableMapping.ColumnMappings.Add("FInfo_Reason", "FInfo_Reason");
            tableMapping.ColumnMappings.Add("Stat", "Stat");
            tableMapping.ColumnMappings.Add("AuditStat", "AuditStat");
            tableMapping.ColumnMappings.Add("AuditCurAudit", "AuditCurAudit");
            tableMapping.ColumnMappings.Add("FInfo_Udef1", "FInfo_Udef1");
            tableMapping.ColumnMappings.Add("FInfo_Udef2", "FInfo_Udef2");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QX.Plugin.Prod.Properties.Settings.Default.MacDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT FInfo_ID, FInfo_Code, FInfo_CustomerCode, FInfo_HandCode, FInfo_RespEntity1, FInfo_RespEntity2, FInfo_CmdCode, FInfo_PartNo, FInfo_PartName, FInfo_PartSpec, FInfo_Num, FInfo_ProdNo, FInfo_FindNode, FInfo_FindNodeName, FInfo_RespNode, FInfo_RespEntity, FInfo_TechReq, FInfo_InCompetent, FInfo_Owner, FInfo_Date, FInfo_Process, FInfo_Stat, FInfo_IsCancel, FInfo_CancelPep, FInfo_CancelDate, FInfo_CancelDesp, FInfo_IsClaim, FInfo_ClaimDesp, FInfo_ClaimPep, FInfo_ClaimDate, FInfo_Reason, Stat, AuditStat, AuditCurAudit, FInfo_Udef1, FInfo_Udef2 FROM dbo.VRpt_FInformation";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RptFail.VRpt_FInformationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RptFail.VRpt_FInformationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RptFail.VRpt_FInformationDataTable dataTable = new RptFail.VRpt_FInformationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(RptFail dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(RptFail dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(RptFail dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(RptFail dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591