//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4927
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QX.Plugin.Prod.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FeedBackDB")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FeedBackDB : global::System.Data.DataSet {
        
        private VRpt_FeedBackDataTable tableVRpt_FeedBack;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FeedBackDB() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FeedBackDB(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["VRpt_FeedBack"] != null)) {
                    base.Tables.Add(new VRpt_FeedBackDataTable(ds.Tables["VRpt_FeedBack"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VRpt_FeedBackDataTable VRpt_FeedBack {
            get {
                return this.tableVRpt_FeedBack;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FeedBackDB cln = ((FeedBackDB)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["VRpt_FeedBack"] != null)) {
                    base.Tables.Add(new VRpt_FeedBackDataTable(ds.Tables["VRpt_FeedBack"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableVRpt_FeedBack = ((VRpt_FeedBackDataTable)(base.Tables["VRpt_FeedBack"]));
            if ((initTable == true)) {
                if ((this.tableVRpt_FeedBack != null)) {
                    this.tableVRpt_FeedBack.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FeedBackDB";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FeedBackDB.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVRpt_FeedBack = new VRpt_FeedBackDataTable();
            base.Tables.Add(this.tableVRpt_FeedBack);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVRpt_FeedBack() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FeedBackDB ds = new FeedBackDB();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void VRpt_FeedBackRowChangeEventHandler(object sender, VRpt_FeedBackRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VRpt_FeedBackDataTable : global::System.Data.TypedTableBase<VRpt_FeedBackRow> {
            
            private global::System.Data.DataColumn columnFB_ID;
            
            private global::System.Data.DataColumn columnFB_Code;
            
            private global::System.Data.DataColumn columnFB_Customer;
            
            private global::System.Data.DataColumn columnFB_CustomerName;
            
            private global::System.Data.DataColumn columnFB_Contact;
            
            private global::System.Data.DataColumn columnFB_Mobile;
            
            private global::System.Data.DataColumn columnFB_Content;
            
            private global::System.Data.DataColumn columnFB_Date;
            
            private global::System.Data.DataColumn columnFB_RespDept;
            
            private global::System.Data.DataColumn columnFB_RespDeptName;
            
            private global::System.Data.DataColumn columnFB_Level;
            
            private global::System.Data.DataColumn columnFB_Cate;
            
            private global::System.Data.DataColumn columnFB_CateOther;
            
            private global::System.Data.DataColumn columnFB_Reason;
            
            private global::System.Data.DataColumn columnFB_ReasonOther;
            
            private global::System.Data.DataColumn columnFB_Handle;
            
            private global::System.Data.DataColumn columnStat;
            
            private global::System.Data.DataColumn columnCreateTime;
            
            private global::System.Data.DataColumn columnUpdateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackDataTable() {
                this.TableName = "VRpt_FeedBack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VRpt_FeedBackDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VRpt_FeedBackDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_IDColumn {
                get {
                    return this.columnFB_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_CodeColumn {
                get {
                    return this.columnFB_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_CustomerColumn {
                get {
                    return this.columnFB_Customer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_CustomerNameColumn {
                get {
                    return this.columnFB_CustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_ContactColumn {
                get {
                    return this.columnFB_Contact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_MobileColumn {
                get {
                    return this.columnFB_Mobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_ContentColumn {
                get {
                    return this.columnFB_Content;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_DateColumn {
                get {
                    return this.columnFB_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_RespDeptColumn {
                get {
                    return this.columnFB_RespDept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_RespDeptNameColumn {
                get {
                    return this.columnFB_RespDeptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_LevelColumn {
                get {
                    return this.columnFB_Level;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_CateColumn {
                get {
                    return this.columnFB_Cate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_CateOtherColumn {
                get {
                    return this.columnFB_CateOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_ReasonColumn {
                get {
                    return this.columnFB_Reason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_ReasonOtherColumn {
                get {
                    return this.columnFB_ReasonOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB_HandleColumn {
                get {
                    return this.columnFB_Handle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatColumn {
                get {
                    return this.columnStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateTimeColumn {
                get {
                    return this.columnCreateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateTimeColumn {
                get {
                    return this.columnUpdateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackRow this[int index] {
                get {
                    return ((VRpt_FeedBackRow)(this.Rows[index]));
                }
            }
            
            public event VRpt_FeedBackRowChangeEventHandler VRpt_FeedBackRowChanging;
            
            public event VRpt_FeedBackRowChangeEventHandler VRpt_FeedBackRowChanged;
            
            public event VRpt_FeedBackRowChangeEventHandler VRpt_FeedBackRowDeleting;
            
            public event VRpt_FeedBackRowChangeEventHandler VRpt_FeedBackRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVRpt_FeedBackRow(VRpt_FeedBackRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackRow AddVRpt_FeedBackRow(
                        string FB_Code, 
                        string FB_Customer, 
                        string FB_CustomerName, 
                        string FB_Contact, 
                        string FB_Mobile, 
                        string FB_Content, 
                        System.DateTime FB_Date, 
                        string FB_RespDept, 
                        string FB_RespDeptName, 
                        string FB_Level, 
                        string FB_Cate, 
                        string FB_CateOther, 
                        string FB_Reason, 
                        string FB_ReasonOther, 
                        string FB_Handle, 
                        int Stat, 
                        System.DateTime CreateTime, 
                        System.DateTime UpdateTime) {
                VRpt_FeedBackRow rowVRpt_FeedBackRow = ((VRpt_FeedBackRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FB_Code,
                        FB_Customer,
                        FB_CustomerName,
                        FB_Contact,
                        FB_Mobile,
                        FB_Content,
                        FB_Date,
                        FB_RespDept,
                        FB_RespDeptName,
                        FB_Level,
                        FB_Cate,
                        FB_CateOther,
                        FB_Reason,
                        FB_ReasonOther,
                        FB_Handle,
                        Stat,
                        CreateTime,
                        UpdateTime};
                rowVRpt_FeedBackRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVRpt_FeedBackRow);
                return rowVRpt_FeedBackRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackRow FindByFB_ID(decimal FB_ID) {
                return ((VRpt_FeedBackRow)(this.Rows.Find(new object[] {
                            FB_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VRpt_FeedBackDataTable cln = ((VRpt_FeedBackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VRpt_FeedBackDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFB_ID = base.Columns["FB_ID"];
                this.columnFB_Code = base.Columns["FB_Code"];
                this.columnFB_Customer = base.Columns["FB_Customer"];
                this.columnFB_CustomerName = base.Columns["FB_CustomerName"];
                this.columnFB_Contact = base.Columns["FB_Contact"];
                this.columnFB_Mobile = base.Columns["FB_Mobile"];
                this.columnFB_Content = base.Columns["FB_Content"];
                this.columnFB_Date = base.Columns["FB_Date"];
                this.columnFB_RespDept = base.Columns["FB_RespDept"];
                this.columnFB_RespDeptName = base.Columns["FB_RespDeptName"];
                this.columnFB_Level = base.Columns["FB_Level"];
                this.columnFB_Cate = base.Columns["FB_Cate"];
                this.columnFB_CateOther = base.Columns["FB_CateOther"];
                this.columnFB_Reason = base.Columns["FB_Reason"];
                this.columnFB_ReasonOther = base.Columns["FB_ReasonOther"];
                this.columnFB_Handle = base.Columns["FB_Handle"];
                this.columnStat = base.Columns["Stat"];
                this.columnCreateTime = base.Columns["CreateTime"];
                this.columnUpdateTime = base.Columns["UpdateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFB_ID = new global::System.Data.DataColumn("FB_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_ID);
                this.columnFB_Code = new global::System.Data.DataColumn("FB_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Code);
                this.columnFB_Customer = new global::System.Data.DataColumn("FB_Customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Customer);
                this.columnFB_CustomerName = new global::System.Data.DataColumn("FB_CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_CustomerName);
                this.columnFB_Contact = new global::System.Data.DataColumn("FB_Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Contact);
                this.columnFB_Mobile = new global::System.Data.DataColumn("FB_Mobile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Mobile);
                this.columnFB_Content = new global::System.Data.DataColumn("FB_Content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Content);
                this.columnFB_Date = new global::System.Data.DataColumn("FB_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Date);
                this.columnFB_RespDept = new global::System.Data.DataColumn("FB_RespDept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_RespDept);
                this.columnFB_RespDeptName = new global::System.Data.DataColumn("FB_RespDeptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_RespDeptName);
                this.columnFB_Level = new global::System.Data.DataColumn("FB_Level", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Level);
                this.columnFB_Cate = new global::System.Data.DataColumn("FB_Cate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Cate);
                this.columnFB_CateOther = new global::System.Data.DataColumn("FB_CateOther", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_CateOther);
                this.columnFB_Reason = new global::System.Data.DataColumn("FB_Reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Reason);
                this.columnFB_ReasonOther = new global::System.Data.DataColumn("FB_ReasonOther", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_ReasonOther);
                this.columnFB_Handle = new global::System.Data.DataColumn("FB_Handle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB_Handle);
                this.columnStat = new global::System.Data.DataColumn("Stat", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStat);
                this.columnCreateTime = new global::System.Data.DataColumn("CreateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateTime);
                this.columnUpdateTime = new global::System.Data.DataColumn("UpdateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFB_ID}, true));
                this.columnFB_ID.AutoIncrement = true;
                this.columnFB_ID.AutoIncrementSeed = -1;
                this.columnFB_ID.AutoIncrementStep = -1;
                this.columnFB_ID.AllowDBNull = false;
                this.columnFB_ID.ReadOnly = true;
                this.columnFB_ID.Unique = true;
                this.columnFB_Code.MaxLength = 20;
                this.columnFB_Customer.MaxLength = 20;
                this.columnFB_CustomerName.MaxLength = 100;
                this.columnFB_Contact.MaxLength = 20;
                this.columnFB_Mobile.MaxLength = 50;
                this.columnFB_Content.MaxLength = 2147483647;
                this.columnFB_RespDept.MaxLength = 20;
                this.columnFB_RespDeptName.MaxLength = 20;
                this.columnFB_Level.MaxLength = 20;
                this.columnFB_Cate.MaxLength = 20;
                this.columnFB_CateOther.MaxLength = 200;
                this.columnFB_Reason.MaxLength = 2147483647;
                this.columnFB_ReasonOther.MaxLength = 200;
                this.columnFB_Handle.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackRow NewVRpt_FeedBackRow() {
                return ((VRpt_FeedBackRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VRpt_FeedBackRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VRpt_FeedBackRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VRpt_FeedBackRowChanged != null)) {
                    this.VRpt_FeedBackRowChanged(this, new VRpt_FeedBackRowChangeEvent(((VRpt_FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VRpt_FeedBackRowChanging != null)) {
                    this.VRpt_FeedBackRowChanging(this, new VRpt_FeedBackRowChangeEvent(((VRpt_FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VRpt_FeedBackRowDeleted != null)) {
                    this.VRpt_FeedBackRowDeleted(this, new VRpt_FeedBackRowChangeEvent(((VRpt_FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VRpt_FeedBackRowDeleting != null)) {
                    this.VRpt_FeedBackRowDeleting(this, new VRpt_FeedBackRowChangeEvent(((VRpt_FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVRpt_FeedBackRow(VRpt_FeedBackRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FeedBackDB ds = new FeedBackDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VRpt_FeedBackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VRpt_FeedBackRow : global::System.Data.DataRow {
            
            private VRpt_FeedBackDataTable tableVRpt_FeedBack;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VRpt_FeedBackRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVRpt_FeedBack = ((VRpt_FeedBackDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FB_ID {
                get {
                    return ((decimal)(this[this.tableVRpt_FeedBack.FB_IDColumn]));
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Code {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Customer {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_CustomerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Customer”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_CustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Contact {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_ContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Contact”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Mobile {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_MobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Mobile”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_MobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Content {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_ContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Content”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_ContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FB_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_FeedBack.FB_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_RespDept {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_RespDeptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_RespDept”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_RespDeptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_RespDeptName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_RespDeptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_RespDeptName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_RespDeptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Level {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_LevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Level”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_LevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Cate {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_CateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Cate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_CateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_CateOther {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_CateOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_CateOther”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_CateOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Reason {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_ReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Reason”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_ReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_ReasonOther {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_ReasonOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_ReasonOther”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_ReasonOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB_Handle {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_FeedBack.FB_HandleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“FB_Handle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.FB_HandleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stat {
                get {
                    try {
                        return ((int)(this[this.tableVRpt_FeedBack.StatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“Stat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.StatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_FeedBack.CreateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“CreateTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.CreateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_FeedBack.UpdateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_FeedBack”中列“UpdateTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_FeedBack.UpdateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_CodeNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_CodeNull() {
                this[this.tableVRpt_FeedBack.FB_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_CustomerNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_CustomerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_CustomerNull() {
                this[this.tableVRpt_FeedBack.FB_CustomerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_CustomerNameNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_CustomerNameNull() {
                this[this.tableVRpt_FeedBack.FB_CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_ContactNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_ContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_ContactNull() {
                this[this.tableVRpt_FeedBack.FB_ContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_MobileNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_MobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_MobileNull() {
                this[this.tableVRpt_FeedBack.FB_MobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_ContentNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_ContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_ContentNull() {
                this[this.tableVRpt_FeedBack.FB_ContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_DateNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_DateNull() {
                this[this.tableVRpt_FeedBack.FB_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_RespDeptNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_RespDeptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_RespDeptNull() {
                this[this.tableVRpt_FeedBack.FB_RespDeptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_RespDeptNameNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_RespDeptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_RespDeptNameNull() {
                this[this.tableVRpt_FeedBack.FB_RespDeptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_LevelNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_LevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_LevelNull() {
                this[this.tableVRpt_FeedBack.FB_LevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_CateNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_CateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_CateNull() {
                this[this.tableVRpt_FeedBack.FB_CateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_CateOtherNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_CateOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_CateOtherNull() {
                this[this.tableVRpt_FeedBack.FB_CateOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_ReasonNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_ReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_ReasonNull() {
                this[this.tableVRpt_FeedBack.FB_ReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_ReasonOtherNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_ReasonOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_ReasonOtherNull() {
                this[this.tableVRpt_FeedBack.FB_ReasonOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB_HandleNull() {
                return this.IsNull(this.tableVRpt_FeedBack.FB_HandleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB_HandleNull() {
                this[this.tableVRpt_FeedBack.FB_HandleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatNull() {
                return this.IsNull(this.tableVRpt_FeedBack.StatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatNull() {
                this[this.tableVRpt_FeedBack.StatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateTimeNull() {
                return this.IsNull(this.tableVRpt_FeedBack.CreateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateTimeNull() {
                this[this.tableVRpt_FeedBack.CreateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateTimeNull() {
                return this.IsNull(this.tableVRpt_FeedBack.UpdateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateTimeNull() {
                this[this.tableVRpt_FeedBack.UpdateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VRpt_FeedBackRowChangeEvent : global::System.EventArgs {
            
            private VRpt_FeedBackRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackRowChangeEvent(VRpt_FeedBackRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_FeedBackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QX.Plugin.Prod.Report.FeedBackDBTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VRpt_FeedBackTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VRpt_FeedBackTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "VRpt_FeedBack";
            tableMapping.ColumnMappings.Add("FB_ID", "FB_ID");
            tableMapping.ColumnMappings.Add("FB_Code", "FB_Code");
            tableMapping.ColumnMappings.Add("FB_Customer", "FB_Customer");
            tableMapping.ColumnMappings.Add("FB_CustomerName", "FB_CustomerName");
            tableMapping.ColumnMappings.Add("FB_Contact", "FB_Contact");
            tableMapping.ColumnMappings.Add("FB_Mobile", "FB_Mobile");
            tableMapping.ColumnMappings.Add("FB_Content", "FB_Content");
            tableMapping.ColumnMappings.Add("FB_Date", "FB_Date");
            tableMapping.ColumnMappings.Add("FB_RespDept", "FB_RespDept");
            tableMapping.ColumnMappings.Add("FB_RespDeptName", "FB_RespDeptName");
            tableMapping.ColumnMappings.Add("FB_Level", "FB_Level");
            tableMapping.ColumnMappings.Add("FB_Cate", "FB_Cate");
            tableMapping.ColumnMappings.Add("FB_CateOther", "FB_CateOther");
            tableMapping.ColumnMappings.Add("FB_Reason", "FB_Reason");
            tableMapping.ColumnMappings.Add("FB_ReasonOther", "FB_ReasonOther");
            tableMapping.ColumnMappings.Add("FB_Handle", "FB_Handle");
            tableMapping.ColumnMappings.Add("Stat", "Stat");
            tableMapping.ColumnMappings.Add("CreateTime", "CreateTime");
            tableMapping.ColumnMappings.Add("UpdateTime", "UpdateTime");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QX.Plugin.Prod.Properties.Settings.Default.MacDConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FB_ID, FB_Code, FB_Customer, FB_CustomerName, FB_Contact, FB_Mobile, FB_Co" +
                "ntent, FB_Date, FB_RespDept, FB_RespDeptName, FB_Level, FB_Cate, FB_CateOther, F" +
                "B_Reason, FB_ReasonOther, FB_Handle, Stat, CreateTime, UpdateTime FROM dbo.VRpt_" +
                "FeedBack";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FeedBackDB.VRpt_FeedBackDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FeedBackDB.VRpt_FeedBackDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FeedBackDB.VRpt_FeedBackDataTable dataTable = new FeedBackDB.VRpt_FeedBackDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(FeedBackDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(FeedBackDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(FeedBackDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(FeedBackDB dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591